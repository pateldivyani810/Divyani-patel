<section class="product-grid-section"> 
  <div class="container">
    <div class="product-grid">
      {% for block in section.blocks %}
        {% assign product = all_products[block.settings.product] %}
        {% if product %}
          <div class="product-card" data-product-handle="{{ block.settings.product.handle }}">
            <img src="{{ product.featured_image | image_url: width: 350, height: 350, crop: 'center' }}"
                alt="{{ product.featured_image.alt | escape }}" width="350" height="350" loading="lazy">
            <button class="quick-view-btn" data-handle="{{ product.handle }}" draggable="true">+</button>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Popup Modal -->
<div id="quick-view-popup" class="popup hidden">
  <div class="popup-inner">
    <span class="popup-close" id="popup-close">&times;</span>
    <div class="popup-body">
      
      <!-- Image -->
      <div class="popup-image">
        <img id="popup-image" src="" alt="" width="100" height="200" loading="lazy">
      </div>

      <!-- Details -->
      <div class="popup-details">
        <h3 id="popup-title" class="popup-title"></h3>
        <p id="popup-price" class="popup-price"></p>
        <p id="popup-description" class="popup-description"></p>

        <form id="popup-form" class="popup-form">
          <!-- Color Options -->
          <div class="variant-group">
            <label>Color</label>
            <div id="popup-color" class="variant-options"></div>
          </div>

          <!-- Size Options -->
          <div class="variant-group">
            <label for="popup-variants">Color</label>
            <select id="popup-variants">Size</select>
          </div>

          <button id="popup-add-to-cart" type="button" class="popup-add-btn">
            ADD TO CART â†’
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
</div>
</section> 

{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid with Popup",
      "category": "Products"
    }
  ]
}
{% endschema %}
<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 5px 15px;
}
section.product-grid-section {
    display: flex;
    justify-content: center;
}
@media(max-width: 768px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}
.product-card {
  position: relative;
}
.quick-view-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 35px;
  height: 35px;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 50%;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab;   /* draggable */
  user-select: none;
}
.quick-view-btn:active {
  cursor: grabbing;
}

/* Popup overlay */
.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.popup.hidden { display: none; }

/* Popup box */
.popup-inner {
  background: #fff;
  border-radius: 6px;
  max-width: 700px;
  width: 90%;
  padding: 20px;
  position: relative;
  box-shadow: 0 5px 25px rgba(0,0,0,0.25);
}

/* Close button */
.popup-close {
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 22px;
  cursor: pointer;
}

/* Layout */
.popup-body {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.popup-image {
  flex: 1 1 40%;
}

.popup-image img {
  width: 100%;
  border-radius: 6px;
}

.popup-details {
  flex: 1 1 55%;
}

/* Text */
.popup-title {
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 8px;
}

.popup-price {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 10px;
}

.popup-description {
  font-size: 14px;
  color: #444;
  margin-bottom: 15px;
}

/* Variants */
.variant-group {
  margin-bottom: 15px;
}

.variant-group label {
  display: block;
  font-size: 14px;
  margin-bottom: 6px;
  font-weight: 600;
}

.variant-options {
  display: flex;
  gap: 10px;
}

.variant-options button {
  flex: 1;
  padding: 10px;
  border: 1px solid #333;
  background: #fff;
  cursor: pointer;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.variant-options button.active,
.variant-options button:hover {
  background: #000;
  color: #fff;
}

#popup-variants {
  width: 100%;
  padding: 10px;
  border-radius: 4px;
  border: 1px solid #333;
  background: #fff;
}

/* Add to Cart */
.popup-add-btn {
  background: #000;
  color: #fff;
  border: none;
  width: 100%;
  padding: 14px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  border-radius: 4px;
  transition: background 0.2s ease;
}

.popup-add-btn:hover {
  background: #333;
}

/* Mobile responsive */
@media (max-width: 600px) {
  .popup-body {
    flex-direction: column;
  }
}

.drag-icon {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 35px;
  height: 35px;
  background: white;
  border: 1px solid #ccc;
  border-radius: 50%;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}
.drag-icon:active {
  cursor: grabbing;
}

</style>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const popup = document.querySelector("#quick-view-popup");
  const closeBtn = document.querySelector(".popup-close");
  const titleEl = document.querySelector("#popup-title");
  const priceEl = document.querySelector("#popup-price");
  const descEl = document.querySelector("#popup-description");
  const imgEl = document.querySelector("#popup-image");
  const colorWrapper = document.querySelector("#popup-color");
  const sizeSelect = document.querySelector("#popup-variants");
  const addToCartBtn = document.querySelector("#popup-add-to-cart");

  let currentProduct = null;
  let colorIdx = null;
  let sizeIdx = null;
  let selectedColor = null;
  let selectedSize = null;

  // Helper to read variant option value in a robust way
  function getVariantOption(variant, index) {
    if (!variant) return null;
    if (Array.isArray(variant.options) && variant.options[index] !== undefined) return variant.options[index];
    const key = "option" + (index + 1);
    if (variant[key] !== undefined) return variant[key];
    return null;
  }

  // open popup for a product handle
  function openPopupForProduct(handle) {
    fetch(`/products/${handle}.js`)
      .then(r => r.json())
      .then(product => {
        currentProduct = product;

        // determine option indices
        const optionNames = Array.isArray(product.options) ? product.options : [];
        colorIdx = optionNames.findIndex(n => /^(color|colour)$/i.test(n));
        sizeIdx = optionNames.findIndex(n => /^size$/i.test(n));

        // fallback if not found: use first two options (if exist)
        if (colorIdx === -1) colorIdx = optionNames.length > 0 ? 0 : null;
        if (sizeIdx === -1) sizeIdx = optionNames.length > 1 ? 1 : null;

        // default variant: first available or first overall
        const defaultVariant = (product.variants.find(v => v.available) || product.variants[0]) || null;
        selectedColor = colorIdx !== null ? getVariantOption(defaultVariant, colorIdx) : null;
        selectedSize  = sizeIdx  !== null ? getVariantOption(defaultVariant, sizeIdx)  : null;

        // fill title/desc/initial image/price
        titleEl.textContent = product.title || "";
        descEl.innerHTML = product.description || "";
        // show price for defaultVariant
        const initialVariant = defaultVariant;
        priceEl.textContent = initialVariant ? formatPrice(initialVariant.price) : formatPrice(product.price);

        // image
        const fallbackImage = (product.featured_image || (product.images && product.images[0]) || "");
        imgEl.src = (initialVariant && (initialVariant.featured_image || initialVariant.image)) || fallbackImage;

        // build unique color and size lists (deduped)
        const colors = colorIdx !== null
          ? [...new Set(product.variants.map(v => getVariantOption(v, colorIdx)).filter(Boolean))]
          : [];
        const sizes  = sizeIdx !== null
          ? [...new Set(product.variants.map(v => getVariantOption(v, sizeIdx)).filter(Boolean))]
          : [];

        // render color buttons
        colorWrapper.innerHTML = "";
        if (colors.length) {
          colors.forEach(c => {
            const b = document.createElement("button");
            b.type = "button";
            b.className = "variant-color-btn";
            b.textContent = c;
            b.dataset.value = c;
            if (c === selectedColor) b.classList.add("active");
            b.addEventListener("click", () => {
              selectedColor = c;
              // mark active
              document.querySelectorAll("#popup-color .variant-color-btn").forEach(x => x.classList.remove("active"));
              b.classList.add("active");
              // refresh sizes available for this color
              renderSizesForSelectedColor();
              updateSelectedVariantUI();
            });
            colorWrapper.appendChild(b);
          });
        }

        // render sizes (initial)
        sizeSelect.innerHTML = "";
        if (sizes.length) {
          sizes.forEach(s => {
            const o = document.createElement("option");
            o.value = s;
            o.textContent = s;
            sizeSelect.appendChild(o);
          });
        }

        // set size select to selectedSize if present, else first available
        if (selectedSize && Array.from(sizeSelect.options).some(o => o.value === selectedSize)) {
          sizeSelect.value = selectedSize;
        } else if (sizeSelect.options.length) {
          selectedSize = sizeSelect.options[0].value;
          sizeSelect.value = selectedSize;
        } else {
          selectedSize = null;
        }

        // listen for size changes
        sizeSelect.onchange = () => {
          selectedSize = sizeSelect.value;
          // optionally update color buttons to mark which colors available for this size
          highlightColorsForSelectedSize();
          updateSelectedVariantUI();
        };

        // ensure colors reflect sizes availability initially
        renderSizesForSelectedColor();
        highlightColorsForSelectedSize();

        // finally compute and show correct variant details
        updateSelectedVariantUI();

        popup.classList.remove("hidden");
      })
      .catch(err => {
        console.error("Fetch product error:", err);
      });
  }

  // Render sizes filtered by selectedColor (if color selected)
  function renderSizesForSelectedColor() {
    if (!currentProduct || sizeIdx === null) return;
    const availableSizes = selectedColor
      ? [...new Set(currentProduct.variants.filter(v => getVariantOption(v, colorIdx) === selectedColor).map(v => getVariantOption(v, sizeIdx)).filter(Boolean))]
      : [...new Set(currentProduct.variants.map(v => getVariantOption(v, sizeIdx)).filter(Boolean))];

    // repopulate sizeSelect
    sizeSelect.innerHTML = "";
    availableSizes.forEach(s => {
      const o = document.createElement("option");
      o.value = s;
      o.textContent = s;
      sizeSelect.appendChild(o);
    });

    // set selectedSize to previous if still exists, else first
    if (selectedSize && Array.from(sizeSelect.options).some(o => o.value === selectedSize)) {
      sizeSelect.value = selectedSize;
    } else {
      selectedSize = sizeSelect.options.length ? sizeSelect.options[0].value : null;
      if (selectedSize) sizeSelect.value = selectedSize;
    }
  }

  // Highlight color buttons that are available for currently selected size
  function highlightColorsForSelectedSize() {
    if (!currentProduct || colorIdx === null) return;
    document.querySelectorAll("#popup-color .variant-color-btn").forEach(btn => {
      const colorVal = btn.dataset.value;
      const exists = currentProduct.variants.some(v => {
        const cv = getVariantOption(v, colorIdx);
        const sv = sizeIdx !== null ? getVariantOption(v, sizeIdx) : null;
        return cv === colorVal && (selectedSize ? sv === selectedSize : true);
      });
      btn.disabled = !exists;
      btn.style.opacity = exists ? "1" : "0.45";
      if (!exists) btn.classList.remove("active");
    });
  }

  // Find the variant matching current selections and update price + image
  function updateSelectedVariantUI() {
    if (!currentProduct) return;
    const matched = currentProduct.variants.find(v => {
      const cv = colorIdx !== null ? getVariantOption(v, colorIdx) : null;
      const sv = sizeIdx !== null ? getVariantOption(v, sizeIdx) : null;
      const colorMatch = colorIdx === null ? true : cv === selectedColor;
      const sizeMatch  = sizeIdx  === null ? true : sv === selectedSize;
      return colorMatch && sizeMatch;
    });

    if (matched) {
      // price
      priceEl.textContent = formatPrice(matched.price);
      // image: variant may include featured_image or image
      const imgUrl = matched.featured_image || matched.image || currentProduct.featured_image || (currentProduct.images && currentProduct.images[0]) || "";
      if (imgUrl) imgEl.src = imgUrl;
      // save chosen variant id on the add button for later
      addToCartBtn.dataset.variantId = matched.id;
    } else {
      // no exact variant â€” show product-level defaults
      priceEl.textContent = formatPrice(currentProduct.price);
      imgEl.src = currentProduct.featured_image || (currentProduct.images && currentProduct.images[0]) || "";
      addToCartBtn.dataset.variantId = "";
    }
  }

  // currency formatting (simple)
  function formatPrice(cents) {
    // cents may be number or string; ensure numeric
    const p = Number(cents) / 100;
    // Use Shopify.currency.active if available, otherwise fallback to simple formatting
    const currency = (window.Shopify && Shopify.currency && Shopify.currency.active) ? Shopify.currency.active : "";
    return p.toFixed(2) + (currency ? " " + currency : "");
  }

  // attach click handlers on quick-view buttons
  document.querySelectorAll(".quick-view-btn").forEach(btn => {
    btn.addEventListener("click", e => {
      e.preventDefault();
      e.stopPropagation();
      const handle = btn.dataset.handle || btn.closest(".product-card")?.dataset.productHandle;
      if (!handle) return;
      openPopupForProduct(handle);
    });

    // draggable visual behavior (keeps existing)
    btn.addEventListener("dragstart", e => {
      e.dataTransfer.setData("text/plain", "quick-view");
      btn.style.opacity = "0.5";
    });
    btn.addEventListener("dragend", e => {
      btn.style.opacity = "1";
    });
  });

  // close popup
  if (closeBtn) closeBtn.addEventListener("click", () => popup.classList.add("hidden"));
  // close when clicking outside inner
  popup.addEventListener("click", (ev) => {
    if (ev.target === popup) popup.classList.add("hidden");
  });

  // Add to cart handler
  if (addToCartBtn) addToCartBtn.addEventListener("click", () => {
    const variantId = addToCartBtn.dataset.variantId || sizeSelect.value || null;
    if (!variantId) {
      alert("Please select a valid variant.");
      return;
    }

    const payload = { id: variantId, quantity: 1 };
    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    })
    .then(r => r.json())
    .then(added => {
      // optional: special rule if needed
      // if (added.variant_title && added.variant_title.includes("Black") && added.variant_title.includes("Medium")) { ... }

      // simple success feedback
      alert("Added to cart: " + (currentProduct ? currentProduct.title : ""));
      popup.classList.add("hidden");
      // optionally update a cart count element here
    })
    .catch(err => {
      console.error("Add to cart error", err);
      alert("Error adding to cart");
    });
  });
});
</script>

