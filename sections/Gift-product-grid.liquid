<section class="product-grid-section"> 
  <div class="container">
    <div class="product-grid">
      {% for block in section.blocks %}
        {% assign product = all_products[block.settings.product] %}
        {% if product %}
          <div class="product-card" data-product-handle="{{ block.settings.product.handle }}">
            <img src="{{ product.featured_image | image_url: width: 350, height: 350, crop: 'center' }}"
                alt="{{ product.featured_image.alt | escape }}" width="350" height="350" loading="lazy">
            <button class="quick-view-btn" data-handle="{{ product.handle }}" draggable="true">+</button>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Popup Modal -->
    <div id="product-popup" class="popup hidden">
      <div class="popup-inner" id="popup-inner">
      <span class="popup-close">&times;</span>
      <div class="popup-content">
        <img src="{{ product.featured_image | image_url: width: 200, height: 200, crop: 'center' }}"
      alt="{{ product.featured_image.alt | escape }}"
      width="200"
      height="200"
      loading="lazy">
        <h3 id="popup-title"></h3>
        <p id="popup-price"></p>
        <p id="popup-description"></p>

        <form id="popup-form">
          <select id="popup-variants"></select>
          <button type="submit" class="add-to-cart-btn">ADD TO CART â†’</button>
        </form>
      </div>
      </div>
    </div>
</div>
</section> 

{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid with Popup",
      "category": "Products"
    }
  ]
}
{% endschema %}
<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 5px 15px;
}
section.product-grid-section {
    display: flex;
    justify-content: center;
}
@media(max-width: 768px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}
.product-card {
  position: relative;
}
.quick-view-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 35px;
  height: 35px;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 50%;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab;   /* draggable */
  user-select: none;
}
.quick-view-btn:active {
  cursor: grabbing;
}

/* Popup */
.popup {
  position: fixed;
  top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(0,0,0,0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
}
.popup.hidden { display: none; }

.popup-inner {
  background: #fff;
  padding: 20px;
  max-width: 400px;
  width: 90%;
  position: relative;
  border-radius: 10px;
  cursor: move; /* hint draggable */
}

.popup-close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 22px;
  cursor: pointer;
}
.product-card {
  position: relative;
  display: inline-block;
}

.drag-icon {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 35px;
  height: 35px;
  background: white;
  border: 1px solid #ccc;
  border-radius: 50%;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab;   /* ðŸ‘ˆ show draggable hand */
  user-select: none;
}
.drag-icon:active {
  cursor: grabbing;
}

</style>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const popup = document.getElementById("product-popup");
  const popupInner = document.getElementById("popup-inner");
  const closeBtn = document.querySelector(".popup-close");

  const popupImage = document.getElementById("popup-image");
  const popupTitle = document.getElementById("popup-title");
  const popupPrice = document.getElementById("popup-price");
  const popupDescription = document.getElementById("popup-description");
  const popupVariants = document.getElementById("popup-variants");
  const popupForm = document.getElementById("popup-form");

  // Open popup on quick view click
  document.querySelectorAll(".quick-view-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      fetch(`/products/${btn.dataset.handle}.js`)
        .then(res => res.json())
        .then(product => {
          popupImage.src = product.images[0];
          popupTitle.textContent = product.title;
          popupPrice.textContent = (product.price / 100).toFixed(2) + " " + Shopify.currency.active;
          popupDescription.textContent = product.description;

          popupVariants.innerHTML = "";
          product.variants.forEach(variant => {
            let opt = document.createElement("option");
            opt.value = variant.id;
            opt.textContent = variant.title + " - " + (variant.price / 100).toFixed(2) + " " + Shopify.currency.active;
            popupVariants.appendChild(opt);
          });

          popup.classList.remove("hidden");
        });
    });
  });

  // Close popup
  closeBtn.addEventListener("click", () => popup.classList.add("hidden"));

  // Draggable modal
  let isDragging = false, offsetX, offsetY;
  popupInner.addEventListener("mousedown", e => {
    isDragging = true;
    offsetX = e.clientX - popupInner.offsetLeft;
    offsetY = e.clientY - popupInner.offsetTop;
  });
  document.addEventListener("mousemove", e => {
    if (isDragging) {
      popupInner.style.position = "absolute";
      popupInner.style.left = (e.clientX - offsetX) + "px";
      popupInner.style.top = (e.clientY - offsetY) + "px";
    }
  });
  document.addEventListener("mouseup", () => isDragging = false);

  // Add to Cart
  popupForm.addEventListener("submit", e => {
    e.preventDefault();
    const variantId = popupVariants.value;

    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: variantId, quantity: 1 })
    })
    .then(res => res.json())
    .then(data => {
      // Special condition: add "Soft Winter Jacket" if Black + Medium
      if (data.variant_title.includes("Black") && data.variant_title.includes("Medium")) {
        fetch("/products/soft-winter-jacket.js")
          .then(res => res.json())
          .then(prod => {
            fetch("/cart/add.js", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ id: prod.variants[0].id, quantity: 1 })
            });
          });
      }
      alert("âœ… Added to cart!");
      popup.classList.add("hidden");
    })
    .catch(err => console.error(err));
  });
});
document.querySelectorAll(".drag-icon").forEach(icon => {
  // âœ… Click â†’ open popup
  icon.addEventListener("click", function(e) {
    e.stopPropagation(); // stop card click
    const productHandle = this.closest(".product-card").dataset.productHandle;

    fetch(`/products/${productHandle}.js`)
      .then(res => res.json())
      .then(product => {
        // Fill popup content
        document.querySelector("#popup-title").textContent = product.title;
        document.querySelector("#popup-price").textContent = (product.price / 100).toFixed(2) + " " + Shopify.currency.active;
        document.querySelector("#popup-description").textContent = product.description;
        document.querySelector("#popup-image").src = product.featured_image;

        // Variants
        const variantSelect = document.querySelector("#popup-variants");
        variantSelect.innerHTML = "";
        product.variants.forEach(variant => {
          const option = document.createElement("option");
          option.value = variant.id;
          option.textContent = variant.title;
          variantSelect.appendChild(option);
        });

        document.querySelector("#popup").classList.remove("hidden");
      });
  });

  // âœ… Drag behaviour
  icon.addEventListener("dragstart", function(e) {
    e.dataTransfer.setData("text/plain", "dragging-product");
    this.style.opacity = "0.5";
  });

  icon.addEventListener("dragend", function() {
    this.style.opacity = "1";
  });
});

</script>
