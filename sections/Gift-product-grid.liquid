<section class="product-grid-section"> 
  <div class="container">
    <h2 class="product-heading">{{ section.settings.heading }}</h2>
    <div class="product-grid">
      {% for block in section.blocks %}
        {% assign product = all_products[block.settings.product] %}
        {% if product %}
          <div class="product-card" data-product-handle="{{ block.settings.product.handle }}">
            <img src="{{ product.featured_image | image_url: width: 350, height: 350, crop: 'center' }}"
                alt="{{ product.featured_image.alt | escape }}" width="350" height="350" loading="lazy">
            <button class="quick-view-btn" data-handle="{{ product.handle }}" draggable="true">+</button>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <!-- Popup Modal -->
<div id="quick-view-popup" class="popup hidden">
  <div class="popup-inner">
    <span class="popup-close" id="popup-close">&times;</span>
    <div class="popup-body">
      
      <!-- Image -->
      <div class="popup-image">
        <img id="popup-image" src="" alt="" width="100" height="200" loading="lazy">
      </div>

      <!-- Details -->
      <div class="popup-details">
        <h3 id="popup-title" class="popup-title"></h3>
        <p id="popup-price" class="popup-price"></p>
        <p id="popup-description" class="popup-description"></p>

        <form id="popup-form" class="popup-form">
          <!-- Color Options -->
          <div class="variant-group">
            <label>Color</label>
            <div id="popup-color" class="variant-options"></div>
          </div>

          <!-- Size Options -->
          <div class="variant-group">
            <label for="popup-variants">Size</label>
            <select id="popup-variants"></select>
          </div>

          <button id="popup-add-to-cart" type="button" class="popup-add-btn">
            ADD TO CART →
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
</div>
</section> 

{% schema %}
{
  "name": "Product Grid with Popup",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Product Grid with Popup",
      "category": "Products"
    }
  ]
}
{% endschema %}
<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 15px 15px;
}
.product-grid-section .container {
    max-width: 1600px;
    margin: 0 auto;
    padding: 0 15px;
}
.product-grid-section {
    display: flex;
}
.product-card img {
    width: 100%;
    height: 100%;
}
@media(max-width: 768px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}
.product-card {
  position: relative;
}
.quick-view-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 35px;
  height: 35px;
  background: #fff;
  border: 1px solid #ccc;
  border-radius: 50%;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: grab;   /* draggable */
  user-select: none;
}
.quick-view-btn:active {
  cursor: grabbing;
}

/* Popup overlay */
.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
}

.popup.hidden { display: none; }

/* Popup box */
.popup-inner {
  background: #fff;
  border-radius: 6px;
  max-width: 700px;
  width: 90%;
  padding: 20px;
  position: relative;
  box-shadow: 0 5px 25px rgba(0,0,0,0.25);
}

/* Close button */
.popup-close {
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 22px;
  cursor: pointer;
}

/* Layout */
.popup-body {
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.popup-image {
  flex: 1 1 40%;
}

.popup-image img {
  width: 100%;
  border-radius: 6px;
}

.popup-details {
  flex: 1 1 55%;
}

/* Text */
.popup-title {
  font-size: 20px;
  font-weight: bold;
  margin-bottom: 8px;
}

.popup-price {
  font-size: 18px;
  font-weight: 600;
  margin-bottom: 10px;
}

.popup-description {
  font-size: 14px;
  color: #444;
  margin-bottom: 15px;
}

/* Variants */
.variant-group {
  margin-bottom: 15px;
}

.variant-group label {
  display: block;
  font-size: 14px;
  margin-bottom: 6px;
  font-weight: 600;
}

.variant-options {
  display: flex;
  gap: 10px;
}

.variant-options button {
  flex: 1;
  padding: 10px;
  border: 1px solid #333;
  background: #fff;
  cursor: pointer;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.variant-options button.active,
.variant-options button:hover {
  background: #000;
  color: #fff;
}

#popup-variants {
  width: 100%;
  padding: 10px;
  border-radius: 4px;
  border: 1px solid #333;
  background: #fff;
}

/* Add to Cart */
.popup-add-btn {
  background: #000;
  color: #fff;
  border: none;
  width: 100%;
  padding: 14px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  border-radius: 4px;
  transition: background 0.2s ease;
}

.popup-add-btn:hover {
  background: #333;
}

/* Mobile responsive */
@media (max-width: 600px) {
  .popup-body {
    flex-direction: column;
  }
}

.drag-icon {
  position: absolute;
  top: 10px;
  right: 10px;
  width: 35px;
  height: 35px;
  background: white;
  border: 1px solid #ccc;
  border-radius: 50%;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}
.drag-icon:active {
  cursor: grabbing;
}

</style>
<script>
document.addEventListener("DOMContentLoaded", () => {
  const popup = document.querySelector("#quick-view-popup");
  const closeBtn = document.querySelector("#popup-close");
  const titleEl = document.querySelector("#popup-title");
  const priceEl = document.querySelector("#popup-price");
  const descEl = document.querySelector("#popup-description");
  const imgEl = document.querySelector("#popup-image");
  const colorWrapper = document.querySelector("#popup-color");
  const sizeSelect = document.querySelector("#popup-variants");
  const addToCartBtn = document.querySelector("#popup-add-to-cart");

  let currentProduct = null;
  let selectedColor = null;
  let selectedSize = null;

  // Quick View button events
  document.querySelectorAll(".quick-view-btn").forEach(btn => {
    btn.addEventListener("click", e => {
      e.preventDefault();
      const handle = btn.closest(".product-card").dataset.productHandle;

      fetch(`/products/${handle}.js`)
        .then(res => res.json())
        .then(product => {
          currentProduct = product;

          // Fill popup details
          titleEl.textContent = product.title;
          priceEl.textContent = (product.price / 100).toFixed(2) + " " + Shopify.currency.active;
          descEl.innerHTML = product.description;
          imgEl.src = product.featured_image;

          // Reset selections
          colorWrapper.innerHTML = "";
          sizeSelect.innerHTML = "";
          selectedColor = null;
          selectedSize = null;

          // Extract options
          const colors = [...new Set(product.variants.map(v => v.option1))];
          const sizes = [...new Set(product.variants.map(v => v.option2))];

          // Render Color buttons
          colors.forEach(color => {
            const btnEl = document.createElement("button");
            btnEl.type = "button";
            btnEl.textContent = color;
            btnEl.addEventListener("click", () => {
              selectedColor = color;
              document.querySelectorAll("#popup-color button").forEach(b => b.classList.remove("active"));
              btnEl.classList.add("active");
              filterSizes();
            });
            colorWrapper.appendChild(btnEl);
          });

          // Render Size dropdown
          sizes.forEach(size => {
            const opt = document.createElement("option");
            opt.value = size;
            opt.textContent = size;
            sizeSelect.appendChild(opt);
          });

          sizeSelect.addEventListener("change", () => {
            selectedSize = sizeSelect.value;
          });

          popup.classList.remove("hidden");
        });
    });
  });

  // Close popup
  closeBtn.addEventListener("click", () => {
    popup.classList.add("hidden");
  });

  // Add to Cart
  addToCartBtn.addEventListener("click", () => {
    if (!currentProduct) return;

    const variant = currentProduct.variants.find(v => 
      (!selectedColor || v.option1 === selectedColor) &&
      (!selectedSize || v.option2 === selectedSize)
    );

    if (!variant) {
      alert("Please select Color and Size");
      return;
    }

    const formData = {
      id: variant.id,
      quantity: 1
    };

    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formData)
    })
    .then(res => res.json())
    .then(data => {
      alert(`${currentProduct.title} added to cart!`);
      popup.classList.add("hidden");
    })
    .catch(err => {
      console.error("Add to cart error:", err);
      alert("Error adding to cart");
    });
  });

  // ✅ Filter sizes dynamically based on selected color
  function filterSizes() {
    if (!selectedColor) return;
    sizeSelect.innerHTML = "";

    const sizes = [
      ...new Set(
        currentProduct.variants
          .filter(v => v.option1 === selectedColor)
          .map(v => v.option2)
      )
    ];

    sizes.forEach(size => {
      const opt = document.createElement("option");
      opt.value = size;
      opt.textContent = size;
      sizeSelect.appendChild(opt);
    });
  }
});

</script>
