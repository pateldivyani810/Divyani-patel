<div class="product-grid">
  {% for block in section.blocks %}
    {% assign product = all_products[block.settings.product] %}
    {% if product %}
      <div class="product-card" data-product-handle="{{ product.handle }}">
        <img src="{{ product.featured_image | img_url: '600x600' }}" alt="{{ product.title }}">
        <div class="overlay">+</div>
      </div>
    {% endif %}
  {% endfor %}
</div>

<!-- Popup -->
<div id="product-popup" class="popup hidden">
  <div class="popup-content">
    <span class="popup-close">&times;</span>
    <div class="popup-body">
      <div class="popup-image">
        <img id="popup-img" src="" alt="">
      </div>
      <div class="popup-details">
        <h2 id="popup-title"></h2>
        <p id="popup-price"></p>
        <p id="popup-description"></p>

        <form id="popup-form">
          <div id="popup-options"></div>
          <button type="submit" class="add-to-cart-btn">ADD TO CART →</button>
        </form>
      </div>
    </div>
  </div>
</div>

<style>
.product-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 15px;
}
@media(max-width: 768px) {
  .product-grid { grid-template-columns: repeat(2, 1fr); }
}

.product-card {
  position: relative;
  cursor: pointer;
}
.product-card img {
  width: 100%;
  display: block;
  border-radius: 6px;
}
.product-card .overlay {
  position: absolute;
  top: 10px; right: 10px;
  background: white;
  border-radius: 50%;
  border: 1px solid #ccc;
  font-size: 18px;
  width: 30px; height: 30px;
  display: flex; align-items: center; justify-content: center;
  pointer-events: none; /* ✅ icon visible but card is clickable */
}

.popup {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0,0,0,0.6);
  display: flex;
  justify-content: center;
  align-items: center;
}
.popup.hidden { display: none; }
.popup-content {
  background: #fff;
  padding: 20px;
  border-radius: 8px;
  max-width: 500px;
  width: 90%;
  position: relative;
}
.popup-close {
  position: absolute;
  top: 10px; right: 15px;
  cursor: pointer;
  font-size: 24px;
}
.popup-body {
  display: flex;
  flex-direction: column;
  gap: 15px;
}
.popup-image img {
  max-width: 100%;
  border-radius: 6px;
}
.add-to-cart-btn {
  width: 100%;
  padding: 12px;
  background: black;
  color: white;
  border: none;
  border-radius: 4px;
  font-size: 16px;
  cursor: pointer;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const popup = document.getElementById("product-popup");
  const closeBtn = document.querySelector(".popup-close");
  const img = document.getElementById("popup-img");
  const title = document.getElementById("popup-title");
  const price = document.getElementById("popup-price");
  const desc = document.getElementById("popup-description");
  const optionsContainer = document.getElementById("popup-options");
  const form = document.getElementById("popup-form");

  let currentProduct = null;

  // Open popup on card click (not just +)
  document.querySelectorAll(".product-card").forEach(card => {
    card.addEventListener("click", function() {
      const productHandle = this.dataset.productHandle;
      fetch(`/products/${productHandle}.js`)
        .then(res => res.json())
        .then(product => {
          currentProduct = product;
          img.src = product.images[0] || "";
          title.textContent = product.title;
          price.textContent = `$${(product.price/100).toFixed(2)}`;
          desc.textContent = product.description.replace(/<[^>]*>?/gm, "");

          // Build variant selectors
          optionsContainer.innerHTML = "";
          product.options.forEach((opt, i) => {
            const wrapper = document.createElement("div");
            wrapper.classList.add("option-block");

            const label = document.createElement("label");
            label.textContent = opt.name;
            wrapper.appendChild(label);

            if (opt.name.toLowerCase() === "color") {
              // Render as buttons
              const btnGroup = document.createElement("div");
              product.options_with_values[i].values.forEach(val => {
                const btn = document.createElement("button");
                btn.type = "button";
                btn.textContent = val;
                btn.addEventListener("click", () => {
                  document.querySelectorAll(".option-block button").forEach(b => b.classList.remove("active"));
                  btn.classList.add("active");
                  wrapper.dataset.selected = val;
                });
                btnGroup.appendChild(btn);
              });
              wrapper.appendChild(btnGroup);
            } else {
              // Render as dropdown
              const select = document.createElement("select");
              product.options_with_values[i].values.forEach(val => {
                const optEl = document.createElement("option");
                optEl.value = val;
                optEl.textContent = val;
                select.appendChild(optEl);
              });
              select.addEventListener("change", () => {
                wrapper.dataset.selected = select.value;
              });
              wrapper.appendChild(select);
            }

            optionsContainer.appendChild(wrapper);
          });

          popup.classList.remove("hidden");
        });
    });
  });

  closeBtn.addEventListener("click", () => popup.classList.add("hidden"));

  form.addEventListener("submit", function(e) {
    e.preventDefault();

    // Match variant by selected options
    let selectedOptions = [];
    optionsContainer.querySelectorAll(".option-block").forEach(block => {
      if (block.dataset.selected) {
        selectedOptions.push(block.dataset.selected);
      } else {
        const select = block.querySelector("select");
        if (select) selectedOptions.push(select.value);
      }
    });

    const variant = currentProduct.variants.find(v => v.options.every((opt, idx) => opt === selectedOptions[idx]));

    if (!variant) {
      alert("Please select options.");
      return;
    }

    // Add selected variant
    fetch("/cart/add.js", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ id: variant.id, quantity: 1 })
    })
    .then(res => res.json())
    .then(data => {
      // Special rule
      if (data.variant_title.includes("Black") && data.variant_title.includes("Medium")) {
        fetch("/products/soft-winter-jacket.js`)
          .then(res => res.json())
          .then(prod => {
            const jacketVariant = prod.variants[0];
            return fetch("/cart/add.js", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ id: jacketVariant.id, quantity: 1 })
            });
          });
      }
      alert("✅ Added to cart!");
      popup.classList.add("hidden");
    });
  });
});
</script>
